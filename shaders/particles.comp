#version 430

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}

// Pseudo-random value in half-open range [0:1].
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in; // optimize

uniform sampler2D heightMap;

layout(binding=0, rgba32f) uniform image2D texVolume;
uniform int texWidth;
uniform int texHeight;

// Params from the camera that renders the scene from above
uniform float sceneHt; // max y bound
uniform float sceneRt; // max x bound
uniform float sceneLf; // min x bound
uniform float sceneUp; // max z bound
uniform float sceneDw; // min z bound

//Particle "stats"
uniform float spawnRadius;
uniform vec3 spawnPos;
uniform float maxY;
uniform float minY;
uniform float gravity;
uniform float speed;
uniform vec3 windDir;
uniform float particleSize;
uniform int particlesActive;
uniform int wholeMap;

uniform float time;

layout( std140, binding=1 ) buffer Positions
{
	vec4 particlePos[];
	//vec4 particleDir[];
};

layout( std140, binding=2 ) buffer Directions
{
	vec4 particleDir[];
	//vec4 particleDir[];
};

/*
 * Another buffer for velocities or anything else can be added if needed
*/

float lerp(float x, float y, float a)
{
	return x*(1-a)+y*a;
}

float gettex(uint i,uint j){
    return (vec4((1-texture(heightMap, vec2(-1,1)*(vec2(i,j)/texWidth))))*sceneHt).x ;
}

vec3 randomSquarePos(uint seed1, uint seed2, float minX, float maxX, float minZ, float maxZ)
{
	// minX += 1;
	// minZ += 1;
	// maxX -= 1;
	// maxZ -= 1;
	const float width  = sceneLf - sceneRt;
	float r = random(seed1 * time);
	float x = r * maxX + (1-r) * minX;
	r = random(seed2 + time + 1);
	float z = r * maxZ + (1-r) * minZ;

	return vec3(x, 0, z);
}

vec3 randomCirclePos(uint seed)
{
	float r = sqrt(random(seed + time) * spawnRadius);
	float theta = random(seed) * (2 * 3.1415);

	float x = clamp(r * cos(theta), sceneLf, sceneRt);
	float z = clamp(r * sin(theta), sceneDw, sceneUp);

	return vec3(x, 0, z);
}

float randomHeight(uint seed, float minY, float maxY)
{
	float m = minY;
	if (m > maxY)
		m = maxY;
	return mix(m, maxY, random(seed + 1));
}

void main()
{
	uint i = gl_GlobalInvocationID.x;
	uint j = gl_GlobalInvocationID.y;
	uint k = gl_GlobalInvocationID.x + gl_WorkGroupSize.x * gl_GlobalInvocationID.y;
	vec4 particles = particlePos[i];
	vec4 direction = particleDir[i];

	const float width  = sceneLf - sceneRt;
	const float height = sceneDw - sceneUp;
	const float inv_bbWidth  = -1 / width;
	const float inv_bbHeight = -1 / height;
	const float center_x = width/2;
	const float center_z = height/2;

	if (particlesActive == 1)
	{
		if (particles.w == 0) // if particle is unused, generate new position
		{
			vec3 pPosition = randomCirclePos(k);
			if (wholeMap == 1)
				pPosition = randomSquarePos(k,k,sceneLf, sceneRt, sceneDw, sceneUp);

			vec3 velocity = vec3(
				(random((i * width + j + random(i)) * time) *2 -1), 
				-1, 
				(random((i * width + j + random(j)) * time) *2 -1));
			direction = vec4(normalize(velocity),1);// * 0.04;

			particles.w = 1;
			particles.x = spawnPos.x + pPosition.x;
			particles.y = spawnPos.y + randomHeight(i, minY, maxY);
			particles.z = spawnPos.z + pPosition.z;
		}
		else
		{
			vec3 velocity = direction.xyz;

			velocity.x *= speed * 0.01;
			velocity.y *= gravity * 0.01;
			velocity.z *= speed * 0.01;

			velocity += windDir * 0.001;

			particles.x += velocity.x;
			particles.y += velocity.y;
			particles.z += velocity.z;

			// if (particles.x < sceneLf || particles.x > sceneRt)
			// 	particles.x = clamp(particles.x, sceneLf, sceneRt);

			// if (particles.z < sceneDw || particles.z > sceneUp)
			// 	particles.z = clamp(particles.z, sceneDw, sceneUp);
			if (particles.x < sceneLf)
				particles.x = sceneRt;

			if (particles.x > sceneRt)
				particles.x = sceneLf;

			if (particles.x < sceneDw)
				particles.x = sceneUp;

			if (particles.x > sceneUp)
				particles.x = sceneDw;

			if (particles.z < sceneLf)
				particles.z = sceneRt;

			if (particles.z > sceneRt)
				particles.z = sceneLf;

			if (particles.z < sceneDw)
				particles.z = sceneUp;

			if (particles.z > sceneUp)
				particles.z = sceneDw;

			vec2 uvs = vec2((particles.x - sceneLf) * inv_bbWidth, (particles.z - sceneDw) * inv_bbHeight);
			vec4 value = imageLoad(texVolume, ivec2((-particles.x / width + 0.5) * texWidth, (-particles.z / height + 0.5) * texHeight));
			float sceneHeight = (1 - texture(heightMap, uvs).r) * sceneHt;
			if (particles.y <= sceneHeight + value.r)
			{
				value.x += particleSize;
				value.y += particleSize;
				value.z += particleSize;
				imageStore(texVolume,
			ivec2((-particles.x / width + 0.5) * texWidth, (-particles.z / height + 0.5) * texHeight), 
			value);

				particles.w = 0;

			}
		}
	}

	//float particleHeight = random(i * width + j);


	particlePos[i] = particles;
	particleDir[i] = direction;
}