#version 430

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in; // optimize

uniform writeonly image2D texVolume;
uniform sampler2D heightMap;

uniform float time;

layout( std140, binding=1 ) buffer Positions
{
	vec4 particlePos[];
};

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}

// Pseudo-random value in half-open range [0:1].
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main()
{
	uint i = gl_GlobalInvocationID.x;
	vec4 color;
	vec4 particles = particlePos[i];
	if (particles.w == 0) // if particle is unused, generate new position
	{
		particles.w = 1;
		particles.x = random(i * time + 0) * 20 - 10;
		particles.z = random(i * time + 1) * 20 - 10;
		color = vec4(0, 1, 0, 1);
	}
	else
	{
		vec3 velocity = vec3(random(i * time + 0), 0.0, random(i * time + 1));
		velocity = normalize(velocity) * 0.1;

		particles.x += velocity.x;
		particles.z += velocity.z;

		if (particles.x < -10 || particles.x > 10)
			particles.x = clamp(particles.x, -10, 10);

		if (particles.z < -10 || particles.z > 10)
			particles.z = clamp(particles.z, -10, 10);
		color = vec4(1, 0, 0, 1);
	}

	imageStore(texVolume,
		ivec2((particles.x * 0.05 + 0.5) * 1024, (particles.z * 0.05 + 0.5) * 1024), 
		//vec4(random(float(i)), random(float(i) + 0.53425), random(float(i) + 0.91823), 1.0));
		color);
}