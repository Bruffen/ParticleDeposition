#version 430

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in; // optimize

uniform sampler2D heightMap;
uniform sampler2D heightMapBot;
//uniform restrict image2D texVolume;

layout(binding=2, rgba32f) uniform image2D  texVolume;
uniform int texWidth;
uniform int texHeight;

// Params from the camera that renders the scene from above
uniform float sceneHt; // max y bound
uniform float sceneRt; // max x bound
uniform float sceneLf; // min x bound
uniform float sceneUp; // max z bound
uniform float sceneDw; // min z bound

//Particle "stats"
uniform float radius;
uniform float gravity;
uniform float speed;
uniform vec3 windDir;
uniform float minHeight;
uniform float viscosity;
uniform int simulIterations;
uniform float time;

float sendRecieve(float totalheight,float particleheight, float neibtotal, float neibparticle, float maxHeight, float maxNeib){

    float heightdif = (neibtotal-totalheight);
    float maxRec = max(maxHeight-particleheight,0);
    float maxRecNeib = max(maxNeib - neibparticle,0); 
    float transfer = 0.25 * clamp( clamp(heightdif, -1*particleheight,neibparticle),
                                    -1*maxRecNeib, 
                                    maxRec);
    if(abs(heightdif*0.25) < minHeight)
        return 0;//0.1*(1-viscosity)*transfer; 
    return (1-viscosity)*transfer;

}

float gettex(uint i,uint j){
    if(i <= 0 || j <= 0 || i == texWidth || j == texWidth)
        return 9999.0;
    return (vec4((1-texture(heightMap, vec2(-1,1)*(vec2(i,j)/texWidth))))*sceneHt).x ;
}


float getmax(uint i, uint j){
    float topmap =  gettex(i,j);
    float botmap = (texture(heightMapBot, (vec2(i,j)/texWidth))*sceneHt).x;
    if( topmap < botmap )
        return sceneHt;
    return max(0,topmap - botmap);
}


void main(){

    uint i = gl_GlobalInvocationID.x;
	uint j = gl_GlobalInvocationID.y;
	uint k = gl_GlobalInvocationID.x + gl_WorkGroupSize.x * gl_GlobalInvocationID.y;

    const float width  = sceneLf - sceneRt;
	const float height = sceneDw - sceneUp;
	const float center_x = width/2;
	const float center_z = height/2;
    int auxtime = int(time);
    for(int iter=0; iter < simulIterations;iter ++)
    {
        groupMemoryBarrier();

        float curr  = imageLoad(texVolume,ivec2(i,j)).x;
        float currw  = imageLoad(texVolume,ivec2(i,j)).w;
        float top   = imageLoad(texVolume,ivec2(i-1,j)).x;
        float bot   = imageLoad(texVolume,ivec2(i+1,j)).x;
        float right = imageLoad(texVolume,ivec2(i,j+1)).x;
        float left  = imageLoad(texVolume,ivec2(i,j-1)).x;
        float totalcurr  = curr  + gettex(i,j);
        float totaltop   = top   + gettex(i-1,j);
        float totalbot   = bot   + gettex(i+1,j);
        float totalright = right + gettex(i,j+1);
        float totalleft  = left  + gettex(i,j-1);

        float maxcurr    = getmax(i,j);
        float maxtop     = getmax(i-1,j);
        float maxbot     = getmax(i+1,j);
        float maxright   = getmax(i,j+1);
        float maxleft    = getmax(i,j-1);


        float aux = curr;
        aux += sendRecieve(totalcurr,curr,totaltop,top,maxcurr,maxtop);    
        aux += sendRecieve(totalcurr,curr,totalbot,bot,maxcurr,maxbot);
        aux += sendRecieve(totalcurr,curr,totalright,right,maxcurr,maxright);
        aux += sendRecieve(totalcurr,curr,totalleft,left,maxcurr,maxleft);
        
        groupMemoryBarrier();
        
        imageStore(texVolume, ivec2(i, j ),
                vec4( clamp(aux, 0,maxcurr)
                   ,gettex(i,j),maxcurr,currw)
            );
    }

    //imageStore(texVolume, ivec2(i, j ), vec4(gettex(i,j)) );
}